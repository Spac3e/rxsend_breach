local surface = surface
local Material = Material
local draw = draw
local DrawBloom = DrawBloom
local DrawSharpen = DrawSharpen
local DrawToyTown = DrawToyTown
local Derma_StringRequest = Derma_StringRequest;
local RunConsoleCommand = RunConsoleCommand;
local tonumber = tonumber;
local tostring = tostring;
local CurTime = CurTime;
local Entity = Entity;
local unpack = unpack;
local table = table;
local pairs = pairs;
local ScrW = ScrW;
local ScrH = ScrH;
local concommand = concommand;
local timer = timer;
local ents = ents;
local hook = hook;
local math = math;
local draw = draw;
local pcall = pcall;
local ErrorNoHalt = ErrorNoHalt;
local DeriveGamemode = DeriveGamemode;
local vgui = vgui;
local util = util
local net = net
local player = player

FSpectate = {}

local isSpectating = false
local specEnt
local thirdperson = true
local isRoaming = false

local maxdistmeters_plys = 200
local maxdist_plys = maxdistmeters_plys / 0.01905
local maxdistsqr_plys = maxdist_plys * maxdist_plys

local maxdistmeters_ents = 35
local maxdist_ents = maxdistmeters_ents / 0.01905
local maxdistsqr_ents = maxdist_ents * maxdist_ents
/*---------------------------------------------------------------------------
startHooks
FAdmin tab buttons
---------------------------------------------------------------------------*/
hook.Add("Initialize", "FSpectate", function()
    surface.CreateFont("UiBold", {
        size = 16,
        weight = 800,
        antialias = true,
        shadow = false,
        font = "Verdana"})
end)

/*---------------------------------------------------------------------------
RenderScreenspaceEffects
Draws the lines from players' eyes to where they are looking
---------------------------------------------------------------------------*/
local LineMat = Material("cable/new_cable_lit")
local linesToDraw = {}

local view = {}

function specCalcView()
    view.origin = LocalPlayer():GetShootPos()
    view.angles = LocalPlayer():EyeAngles()
end

local function lookingLines()
    if not linesToDraw[0] then return end
    render.SetMaterial(LineMat)
    cam.Start3D(view.origin, view.angles)
        for i = 0, #linesToDraw, 3 do
            render.DrawLine(linesToDraw[i], linesToDraw[i + 1], linesToDraw[i + 2]) --render.DrawBeam(linesToDraw[i], linesToDraw[i + 1], 2, 0.01, 10, linesToDraw[i + 2])
        end
    cam.End3D()
end
/*---------------------------------------------------------------------------
gunpos
Gets the position of a player's gun
---------------------------------------------------------------------------*/
local function gunpos(ply)
    --local wep = ply:GetActiveWeapon()
    --if not IsValid(wep) then return ply:EyePos() end
    --local att = wep:GetAttachment(1)
    --if not att then return ply:EyePos() end
    --return att.Pos
    return ply:EyePos()
end

/*---------------------------------------------------------------------------
Spectate think
Free roaming position updates
---------------------------------------------------------------------------*/
local function specThink()
    local ply = LocalPlayer()

    -- Update linesToDraw
    local pls = player.GetAll()
    local lastPly = 0
    local skip = 0
    for i = 0, #pls - 1 do
        local p = pls[i + 1]
        if not IsValid(p) then continue end
        if p == LocalPlayer() then
            skip = skip + 3
            continue
        end
        if not isRoaming and p == specEnt and not thirdperson then skip = skip + 3 continue end

        local tr = p:GetEyeTrace()
        local sp = gunpos(p)

        local pos = i * 3 - skip

        linesToDraw[pos] = tr.HitPos
        linesToDraw[pos + 1] = sp
        linesToDraw[pos + 2] = gteams.GetColor(p:GTeam())
        lastPly = i
    end

    -- Remove entries from linesToDraw that don't match with a player anymore
    for i = #linesToDraw, lastPly * 3 + 3, -1 do linesToDraw[i] = nil end
end

/*---------------------------------------------------------------------------
Draw help on the screen
---------------------------------------------------------------------------*/
local uiForeground, uiBackground = Color(240, 240, 255, 255), Color(20, 20, 20, 120)
local red = Color(255, 0, 0, 255)
local green = Color(0, 255, 0, 255)

local ents_blacklist = {
    ["ent_bonemerged"] = true,
    ["base_gmodentity"] = true,
}

--[[
local tier1 = {
Vector(6132.6713867188, 1557.0755615234, 20.398048400879),
            Vector(6134.9584960938, 1559.298828125, 40.394752502441),
            Vector(5598.0283203125, 1814.0473632813, 28.28125),
            Vector(6246.3823242188, -252.71353149414, 11.085380554199),
            Vector(6324.1430664063, -252.41946411133, 11.089447021484),
            Vector(6248.3579101563, -242.59956359863, 59.080219268799),
            Vector(7565.587890625, -845.46337890625, 24.411525726318),
            Vector(7623.9174804688, -846.85241699219, 24.424392700195),
            Vector(7625.7084960938, -847.85345458984, 48.423858642578),
            Vector(7568.322265625, -844.33068847656, 48.413307189941),
            Vector(7749.021484375, -135.93423461914, 36.03125),
            Vector(7722.515625, -610.03857421875, 20.011585235596),
            Vector(7719.6689453125, -607.93963623047, 40.011623382568),
            Vector(7663.4018554688, -610.36938476563, 40.03125),
            Vector(7605.2998046875, -609.44299316406, 40.03125),
            Vector(7602.3803710938, -611.52899169922, 20.03125),
            Vector(5268.2265625, 553.85791015625, 40.387016296387),
            Vector(5267.4780273438, 556.23541259766, 20.386516571045),
            Vector(5192.3413085938, 419.00152587891, 36.03125),
            Vector(5224.982421875, 420.96170043945, 36.03125),
            Vector(5452.2416992188, -973.84222412109, 36.031253814697),
            Vector(5449.1484375, -942.53729248047, 36.031253814697),
            Vector(5445.2021484375, -1053.9241943359, 36.03125),
            Vector(5295.7685546875, -863.62805175781, 24.486335754395),
            Vector(5297.2543945313, -813.69976806641, 24.477619171143),
            Vector(5297.2197265625, -811.37420654297, 48.477214813232),
            Vector(5298.0112304688, -860.65869140625, 48.485816955566),
            Vector(5141.4384765625, -1060.5679931641, 20.031246185303),
            Vector(5141.1284179688, -1061.0067138672, 40.03125),
            Vector(5141.1860351563, -1003.1831665039, 20.031246185303),
            Vector(5141.3291015625, -1005.046081543, 40.03125),
            Vector(5153.18359375, -1116.5717773438, 11.730255126953),
            Vector(5241.6567382813, -1125.2103271484, 25.620952606201),
            Vector(4886.7319335938, -255.34153747559, 10.995635986328),
            Vector(4959.27734375, -253.28140258789, 10.995666503906),
            Vector(4954.9946289063, -252.64047241211, 58.990413665771),
            Vector(4645.4252929688, -123.07472229004, 36.136329650879),
            Vector(4701.0708007813, -125.77453613281, 36.135696411133),
            Vector(4756.09765625, -125.39898681641, 36.135810852051),
            Vector(4580.767578125, -128.61703491211, 49.511299133301),
            Vector(3959.974609375, -112.97955322266, 24.439994812012),
            Vector(3901.3454589844, -112.8567276001, 24.442077636719),
            Vector(3901.5185546875, -112.94648742676, 48.442047119141),
            Vector(3958.2419433594, -113.86975860596, 48.439838409424),
            Vector(4379.8725585938, 366.39202880859, 20.281246185303),
            Vector(4380.23828125, 366.91268920898, 40.28125),
            Vector(4477.2172851563, 366.54165649414, 20.28125),
            Vector(4474.9721679688, 367.02304077148, 40.28125),
            Vector(4226.703125, 810.05975341797, 19.397190093994),
            Vector(4228.4350585938, 914.00653076172, 19.401149749756),
            Vector(4224.712890625, 912.97082519531, 57.443801879883),
            Vector(4442.9384765625, 1169.3536376953, 32.817108154297),
            Vector(4445.8686523438, 1172.3881835938, 8.4745063781738),
            Vector(4397.6689453125, 1762.2918701172, 36.421424865723),
            Vector(4568.8735351563, 1768.6804199219, 36.38745880127),
            Vector(4642.9267578125, 1775.0589599609, 40.424228668213),
            Vector(4644.3081054688, 1778.7722167969, 20.419967651367),
            Vector(5353.4892578125, 1558.1253662109, 36.50061416626),
            Vector(6017.5795898438, 1709.9588623047, 24.384742736816),
            Vector(5971.7006835938, 1707.6694335938, 24.385540008545),
            Vector(5910.1484375, 1708.6378173828, 24.38646697998),
            Vector(5853.4526367188, 1708.2895507813, 24.387451171875),
            Vector(5853.6206054688, 1712.4973144531, 48.387447357178),
            Vector(5905.7587890625, 1709.9853515625, 48.386539459229),
            Vector(5970.8447265625, 1709.1602783203, 48.385555267334),
            Vector(6024.5366210938, 1709.3251953125, 48.384620666504),
            Vector(6034.9609375, 1884.1748046875, 36.91898727417),
            Vector(6034.958984375, 1843.4393310547, 37.05574798584),
            Vector(6034.9228515625, 1774.5581054688, 35.390815734863),
            Vector(5509.7231445313, 1612.2681884766, 20.413494110107),
            Vector(5508.94921875, 1612.2834472656, 40.413654327393),
            Vector(5669.2084960938, 1555.4456787109, 36.281253814697),
            Vector(6785.7778320313, 2267.4870605469, 36.419235229492),
            Vector(6783.263671875, 2205.8354492188, 36.397827148438),
            Vector(6574.6923828125, 2243.3308105469, 24.281246185303),
            Vector(6572.970703125, 2243.9248046875, 48.28125),
            Vector(6574.2836914063, 2290.4643554688, 48.28125),
            Vector(6917.5712890625, 2601.5783691406, 36.391571044922),
            Vector(6897.8618164063, 2449.6672363281, 24.281246185303),
            Vector(6848.4194335938, 2450.6418457031, 24.28125),
            Vector(6846.0024414063, 2449.6081542969, 48.28125),
            Vector(6895.7236328125, 2450.2080078125, 48.28125),
            Vector(6581.2124023438, 2565.6745605469, 36.28125),
            Vector(5331.5244140625, 2420.3083496094, 20.460395812988),
            Vector(5328.45703125, 2418.3076171875, 40.465270996094),
            Vector(5273.09765625, 2416.9020996094, 20.509166717529),
            Vector(5337.0859375, 2276.0703125, 36.386329650879),
            Vector(5593.0126953125, 2453.7658691406, 10.988658905029),
            Vector(5918.2534179688, 2580.7192382813, 42.063774108887),
            Vector(5724.1665039063, 2649.03125, 42.09693145752),
            Vector(5862.5947265625, 2211.8312988281, 49.532974243164),
            Vector(5275.833984375, 2416.8391113281, 40.516860961914),
            Vector(5225.6899414063, 3628.8220214844, 20.436332702637),
            Vector(5225.0756835938, 3625.7880859375, 40.431709289551),
            Vector(5225.6474609375, 3682.6665039063, 20.452613830566),
            Vector(5224.6616210938, 3681.9899902344, 40.453296661377),
            Vector(5021.556640625, 3351.0422363281, 8.4026679992676),
            Vector(5021.484375, 3351.5541992188, 32.754196166992),
            Vector(5077.0830078125, 3358.43359375, 37.331329345703),
            Vector(5118.4165039063, 3358.9995117188, 37.350555419922),
            Vector(5662.26953125, 3493.2080078125, 20.27991104126),
            Vector(5812.521484375, 3495.5717773438, 18.417144775391),
            Vector(5390.9384765625, 3494.2722167969, 19.583477020264),
            Vector(6353.6098632813, 3535.6906738281, 20.463233947754),
            Vector(6353.1279296875, 3535.5717773438, 40.464138031006),
            Vector(6204.7119140625, 3643.6652832031, 20.528377532959),
            Vector(6204.9624023438, 3642.5329589844, 40.52808380127),
            Vector(6203.3056640625, 3359.6047363281, 42.289260864258),
            Vector(6174.96875, 2747.4692382813, 18.394775390625),
            Vector(6731.5688476563, 3064.4296875, 19.236022949219),
            Vector(6640.8193359375, 3063.5913085938, 19.234317779541),
            Vector(7265.4223632813, 2915.8666992188, 24.490268707275),
            Vector(7315.5224609375, 2914.3559570313, 24.48942565918),
            Vector(7428.2866210938, 2917.9138183594, 24.522132873535),
            Vector(7479.263671875, 2917.7119140625, 24.526439666748),
            Vector(7478.5874023438, 2917.5791015625, 48.526268005371),
            Vector(7434.7788085938, 2915.7937011719, 48.520820617676),
            Vector(7321.728515625, 2915.6821289063, 48.489292144775),
            Vector(7269.0366210938, 2914.6997070313, 48.490226745605),
            Vector(7140.85546875, 4339.8203125, -219.96875),
            Vector(7107.8159179688, 4341.7319335938, -219.96875),
            Vector(7179.2749023438, 4376.591796875, -219.96875),
            Vector(7074.337890625, 4342.6162109375, -219.96875),
            Vector(6993.6303710938, 4341.5483398438, -219.96875),
            Vector(6962.6547851563, 4342.3935546875, -219.96875),
            Vector(6703.5532226563, 4174.787109375, -229.98175048828),
            Vector(7528.4028320313, 4547.3754882813, -229.9723815918),
            Vector(6481.4033203125, 3078.0454101563, 8.4929237365723),
            Vector(6479.7153320313, 3075.5607910156, 32.82666015625),
            Vector(3462.3706054688, 66.05980682373, 19.749561309814),
            Vector(3466.4165039063, 9.2389478683472, 19.749485015869),
            Vector(3605.1171875, 67.863258361816, 33.65266418457),
            Vector(3608.2268066406, 122.02142333984, 33.66716003418),
            Vector(3642.8229980469, 357.77767944336, 36.410102844238),
            Vector(3641.1806640625, 607.56231689453, 25.83854675293),
            Vector(4057.4230957031, 3783.0949707031, 18.333099365234),
            Vector(3863.5056152344, 3838.1020507813, 20.28125),
            Vector(3862.2856445313, 3837.9467773438, 40.28125),
            Vector(3861.1066894531, 3898.5498046875, 20.28125),
            Vector(3861.0456542969, 3897.4777832031, 40.28125),
            Vector(4020.8332519531, 3580.7109375, 20.281253814697),
            Vector(4018.9392089844, 3582.4323730469, 40.28125),
            Vector(3876.9030761719, 3580.2143554688, 20.473411560059),
            Vector(3878.5517578125, 3580.0063476563, 40.473434448242),
            Vector(4020.9069824219, 3702.0646972656, 26.054740905762),
            Vector(4078.4672851563, 2648.4077148438, 24.512889862061),
            Vector(4081.9494628906, 2599.1557617188, 24.517189025879),
            Vector(4080.8134765625, 2599.9006347656, 48.517120361328),
            Vector(4082.1440429688, 2647.8129882813, 48.512939453125),
            Vector(3667.111328125, 3150.26953125, 35.219421386719),
            Vector(3750.7700195313, 3099.1325683594, 35.226150512695),
            Vector(3269.4782714844, 3157.1811523438, -90.804840087891),
            Vector(3270.138671875, 3054.4621582031, -91.566986083984),
            Vector(4170.4580078125, 2264.2404785156, 36.28125),
            Vector(4378.4306640625, 1889.7601318359, 20.282253265381),
            Vector(4380.7299804688, 1889.3088378906, 40.282249450684),
            Vector(4381.052734375, 1946.3376464844, 20.282245635986),
            Vector(4379.4951171875, 1946.1916503906, 40.282249450684),
            Vector(4644.3432617188, 1616.1181640625, 24.398376464844),
            Vector(4644.1962890625, 1617.7181396484, 48.399154663086),
            Vector(4593.517578125, 1616.9851074219, 24.397010803223),
            Vector(4593.4477539063, 1615.4167480469, 48.396251678467),
        }

local tier2 = {
            Vector(1745.7967529297, 2174.4912109375, 10.842926025391),
            Vector(1741.8693847656, 2245.6115722656, 58.837661743164),
            Vector(1232.0860595703, 2220.2570800781, 36.482177734375),
            Vector(1261.1831054688, 2224.5817871094, 36.482856750488),
            Vector(1364.8718261719, 2026.8668212891, 36.482429504395),
            Vector(1363.8448486328, 2056.8181152344, 36.482276916504),
            Vector(1360.4234619141, 1939.7857666016, 20.35228729248),
            Vector(1357.1396484375, 1941.3851318359, 40.35844039917),
            Vector(1510.4320068359, 2393.0295410156, 49.301391601563),
            Vector(1557.0989990234, 2338.1491699219, 49.302597045898),
            Vector(-1140.8885498047, 1497.9143066406, -166.58065795898),
            Vector(-1140.6956787109, 1452.2724609375, -166.58062744141),
            Vector(-1140.6033935547, 1456.2033691406, -142.58061218262),
            Vector(-1141.7299804688, 1498.4095458984, -142.5807800293),
            Vector(-1140.6809082031, 1555.2882080078, -165.03604125977),
            Vector(-392.83166503906, 1439.7578125, -167.80590820313),
            Vector(3356.8125, 1415.4259033203, 36.425224304199),
            Vector(3359.0666503906, 1450.2159423828, 36.429962158203),
            Vector(3352.9318847656, 1685.9035644531, 24.530212402344),
            Vector(3352.3713378906, 1633.9971923828, 24.529308319092),
            Vector(3353.9558105469, 1634.8817138672, 48.529319763184),
            Vector(3355.302734375, 1682.0012207031, 48.530139923096),
            Vector(3353.0544433594, 1745.8016357422, 24.531047821045),
            Vector(3352.2194824219, 1801.6528320313, 24.531055450439),
            Vector(3351.9614257813, 1804.0999755859, 48.531051635742),
            Vector(3353.8991699219, 1747.6813964844, 48.531051635742),
            Vector(3350.6804199219, 1861.3820800781, 24.531051635742),
            Vector(3351.8540039063, 1912.1593017578, 24.531047821045),
            Vector(3353.2963867188, 1914.759765625, 48.531051635742),
            Vector(3354.7744140625, 1857.6376953125, 48.531051635742),
            Vector(3680.4284667969, 1921.1186523438, 11.980033874512),
            Vector(3479.6059570313, 1613.2796630859, 26.027194976807),
            Vector(3686.3166503906, 1745.6535644531, 25.958003997803),
            Vector(3690.8703613281, 1478.8564453125, 20.281253814697),
            Vector(3691.0966796875, 1476.6834716797, 40.28125),
            Vector(3376.359375, 2073.2839355469, 18.397575378418),
            Vector(3311.4448242188, 5114.2763671875, 0.031246185302734),
            Vector(3437.7082519531, 5228.615234375, 36.482986450195),
            Vector(3433.5927734375, 5261.7485351563, 36.481769561768),
            Vector(3308.3940429688, 5108.0859375, 36.40096282959),
            Vector(3677.2185058594, 4869.984375, 36.58073425293),
            Vector(3606.5629882813, 4871.4248046875, 36.545745849609),
            Vector(3724.0854492188, 4873.044921875, 25.956558227539),
            Vector(2711.8159179688, 6002.619140625, 24.381370544434),
            Vector(2873.8664550781, 6001.7631835938, 48.468078613281),
            Vector(2309.994140625, 5909.70703125, 24.539751052856),
            Vector(1785.72265625, 6395.7197265625, 24.381980895996),
            Vector(1840.4725341797, 6395.9326171875, 24.386814117432),
            Vector(1840.8648681641, 6400.2036132813, 48.388034820557),
            Vector(1782.203125, 6399.2641601563, 48.382663726807),
            Vector(1897.3765869141, 6399.5620117188, 20.407711029053),
            Vector(1896.2364501953, 6400.0405273438, 40.40682220459),
            Vector(1871.6027832031, 6197.5146484375, 36.408950805664),
            Vector(1934.5360107422, 6196.1962890625, 36.408950805664),
            Vector(2259.8078613281, 6335.6669921875, 35.223236083984),
            Vector(2169.6162109375, 6395.8120117188, 35.220069885254),
            Vector(3742.8366699219, 5763.4072265625, 10.942058563232),
            Vector(3688.6870117188, 5704.5419921875, 10.939613342285),
            Vector(3724.33984375, 6024.7734375, 36.535675048828),
            Vector(5557.1215820313, 1616.9805908203, 25.987548828125),
            Vector(7597.03125, 810.14337158203, 36.496013641357),
            Vector(7597.0444335938, 755.61737060547, 36.493156433105),
            Vector(7452.3745117188, 691.93115234375, 36.28125),
            Vector(7400.2353515625, 814.3740234375, 20.415332794189),
            Vector(7403.91015625, 812.96618652344, 40.417175292969),
            Vector(7256.0795898438, 607.14141845703, 12.174545288086),
            Vector(7179.2358398438, 998.20458984375, 11.615077972412),
            Vector(7054.9970703125, 553.33746337891, 41.638053894043),
            Vector(7107.1635742188, 609.87554931641, 44.876541137695),
            Vector(7068.7680664063, 608.90606689453, 44.865676879883),
            Vector(6930.3081054688, 591.59039306641, 24.604671478271),
            Vector(6931.96875, 550.25360107422, 49.525844573975),
            Vector(6806.6723632813, 607.18621826172, 49.537788391113),
            Vector(7024.5981445313, 1023.4069824219, 25.948852539063),
            Vector(6972.623046875, 806.50622558594, 24.681369781494),
            Vector(6839.68359375, 1015.714050293, 29.085048675537),
            Vector(6943.5712890625, 1023.3715820313, 29.07935333252),
            Vector(6980.4291992188, 1023.6828613281, 29.051292419434),
            Vector(6620.8896484375, 844.451171875, 24.401599884033),
            Vector(6621.6030273438, 785.02325439453, 24.401859283447),
            Vector(6620.9233398438, 786.20983886719, 48.401607513428),
            Vector(6621.859375, 842.10870361328, 48.401954650879),
            Vector(6716.7255859375, 895.97784423828, 25.95499420166),
            Vector(6697.681640625, 1008.7420654297, 49.530944824219),
            Vector(6641.5317382813, 988.6259765625, 49.428451538086),
            Vector(6764.408203125, 551.4140625, 29.073238372803),
            Vector(6846.2788085938, 766.97106933594, 48.849342346191),
            Vector(6969.3720703125, 854.61938476563, 41.352653503418),
            Vector(7258.66796875, 579.31951904297, 64.433029174805),
            Vector(6814.9956054688, 4544.8774414063, -235.96875),
            Vector(6816.05859375, 4544.7670898438, -215.96875),
            Vector(6879.8896484375, 4545.044921875, -235.96875),
            Vector(6879.037109375, 4544.5239257813, -215.96875),
            Vector(5336.310546875, 2207.3898925781, 36.387763977051),
            Vector(5490.4443359375, 2456.4396972656, 10.983669281006),
            Vector(5826.4140625, 2208.2131347656, 29.034191131592),
            Vector(5784.2495117188, 2135.8129882813, 45.924896240234),
            Vector(5871.7661132813, 2590.4780273438, 29.026470184326),
            Vector(6574.15234375, 2293.0930175781, 24.28125),
            Vector(3370.2265625, 3269.9174804688, -103.54257202148),
            Vector(3318.6608886719, 3269.8674316406, -103.52008056641),
            Vector(3319.3273925781, 3266.5551757813, -79.520362854004),
            Vector(3369.181640625, 3266.1398925781, -79.542121887207),
            Vector(3432.9812011719, 3268.806640625, -103.51921081543),
            Vector(3485.3488769531, 3269.9089355469, -103.54295349121),
            Vector(3486.078125, 3268.2338867188, -79.543312072754),
            Vector(3429.8081054688, 3268.763671875, -79.517761230469),
        }

local tier3 = {
    Vector(3664.4458007813, 5449.6508789063, 11.089881896973),
            Vector(3667.12890625, 5456.3017578125, 59.083156585693),
            Vector(3749.1254882813, 5453.3432617188, 58.95792388916),
            Vector(3819.3205566406, 5450.3940429688, 10.970191955566),
            Vector(3380.2485351563, 5390.0073242188, 20.357105255127),
            Vector(3381.0078125, 5390.0727539063, 40.355514526367),
            Vector(3855.8967285156, 4858.8618164063, 24.387836456299),
            Vector(3854.7875976563, 4802.166015625, 24.374172210693),
            Vector(3855.1645507813, 4802.0439453125, 48.37345123291),
            Vector(3853.2399902344, 4858.1723632813, 48.392883300781),
            Vector(3855.8469238281, 4720.71875, 24.78271484375),
            Vector(3860.3395996094, 4670.9086914063, 25.106384277344),
            Vector(3858.5905761719, 4670.955078125, 49.109386444092),
            Vector(3855.8942871094, 4727.2719726563, 48.739677429199),
            Vector(3602.7084960938, 4870.8125, 0.03125),
            Vector(1817.3447265625, 3486.2570800781, -218.70265197754),
            Vector(1814.4174804688, 3519.4460449219, -218.64543151855),
            Vector(1936.4779052734, 3628.6518554688, -232.78890991211),
            Vector(2858.4768066406, 3306.9357910156, -357.98919677734),
            Vector(2175.7319335938, 1604.3461914063, 36.03125),
            Vector(2144.8498535156, 1604.8319091797, 36.03125),
            Vector(2050.9057617188, 1607.9807128906, 36.03125),
            Vector(2018.3747558594, 1605.7072753906, 36.03125),
            Vector(2217.1418457031, 1499.01171875, 24.508686065674),
            Vector(2165.2138671875, 1498.4686279297, 24.468814849854),
            Vector(2163.5544433594, 1496.4206542969, 48.467540740967),
            Vector(2215.5329589844, 1496.6364746094, 48.507461547852),
            Vector(2114.8889160156, 1496.6962890625, 25.974899291992),
            Vector(1939.4704589844, 1506.5109863281, 20.410259246826),
            Vector(2026.7377929688, 1496.1007080078, 26.046829223633),
            Vector(2819.5478515625, 1540.3387451172, 10.970314025879),
            Vector(2244.2839355469, 1191.9309082031, 36.28125),
            Vector(2327.1447753906, 1207.5186767578, 36.28125),
            Vector(2322.2238769531, 1304.3297119141, 36.28125),
            Vector(2004.4840087891, 1221.7532958984, 20.28125),
            Vector(2005.1617431641, 1326.5828857422, 20.28125),
            Vector(2004.3677978516, 1324.4069824219, 40.28125),
            Vector(2005.0238037109, 1223.6181640625, 40.28125),
            Vector(5198.8999023438, -979.04034423828, 26.091148376465),
            Vector(5243.6801757813, -976.37902832031, 25.960948944092),
            Vector(5195.103515625, -1129.1544189453, 11.479274749756),
            Vector(5219.32421875, 550.52655029297, 26.023258209229),
            Vector(7938.7270507813, 2327.9829101563, 0.03125),
            Vector(3987.6320800781, 3952.3454589844, 26.00626373291),
            Vector(5319.5551757813, 3497.7861328125, 57.505851745605),
            Vector(-700.75897216797, -6420.3129882813, -2364.96875),
            Vector(-700.52429199219, -5912.1782226563, -2380.5285644531),
            Vector(-696.57275390625, -5915.2807617188, -2360.5288085938),
            Vector(-1180.4729003906, 1447.3428955078, -167.7179107666),
            Vector(-330.39031982422, 1438.6303710938, -144.55592346191),
}
--]]

local function drawHelp()
    local scrHalfH = math.floor(ScrH() / 2)

    local pls = player.GetAll()
    for i = 1, #pls do
        local ply = pls[i]
        if not IsValid(ply) then continue end

        if LocalPlayer():GetPos():DistToSqr(ply:GetPos()) > maxdistsqr_plys then continue end

        local pos = ply:GetShootPos():ToScreen()
        if not pos.visible then continue end

        local x, y = pos.x, pos.y

        draw.RoundedBox(2, x, y - 6, 12, 12, gteams.GetColor(ply:GTeam()))
        draw.WordBox(2, x, y - 86, ply:Nick().."("..ply:GetNamesurvivor()..")", "BudgetLabel", uiBackground, uiForeground) --LVL:"..ply:GetNLevel()
        draw.WordBox(2, x, y - 66, ply:GetRoleName(), "BudgetLabel", uiBackground, gteams.GetColor(ply:GTeam())) --gteams.GetName(ply:GTeam()).." "..
        draw.WordBox(2, x, y - 46, "HP: "..ply:Health().."/"..ply:GetMaxHealth(), "BudgetLabel", uiBackground, green)
        draw.WordBox(2, x, y - 26, ply:SteamID(), "BudgetLabel", uiBackground, uiForeground)
        --if IsValid(ply:GetActiveWeapon()) then
            --draw.WordBox(2, x, y - 26, ply:GetActiveWeapon():GetClass(), "BudgetLabel", uiBackground, uiForeground)
        --end
    end

    --[[
    local entities = ents.GetAll()
    for i = 1, #entities do
        local ent = entities[i]
        if not IsValid(ent) then continue end

        if LocalPlayer():GetPos():DistToSqr(ent:GetPos()) > maxdistsqr_ents then continue end
        --if !ent:IsScripted() then continue end
        if IsValid(ent:GetOwner()) then continue end
        if ents_blacklist[ent:GetClass()] then continue end

        local pos = ent:GetPos():ToScreen()
        if not pos.visible then continue end

        local x, y = pos.x, pos.y

        draw.RoundedBox(2, x, y, 3, 3, uiForeground)
        draw.WordBox(2, x, y - 26, ent:GetClass(), "BudgetLabel", uiBackground, uiForeground, TEXT_ALIGN_CENTER)
    end
    --]]

    --[[
    for k, v in ipairs(tier1) do
        local pos = v:ToScreen()
        if not pos.visible then continue end
        --if LocalPlayer():GetPos():DistToSqr(v) > maxdistsqr_plys then continue end

        local x, y = pos.x, pos.y

        draw.WordBox(2, x, y, "tier1", "BudgetLabel", Color(255, 0, 0), uiForeground)
    end

    for k, v in ipairs(tier2) do
        local pos = v:ToScreen()
        if not pos.visible then continue end
        --if LocalPlayer():GetPos():DistToSqr(v) > maxdistsqr_plys then continue end

        local x, y = pos.x, pos.y

        draw.WordBox(2, x, y, "tier2", "BudgetLabel", Color(0, 255, 0), uiForeground)
    end

    for k, v in ipairs(tier3) do
        local pos = v:ToScreen()
        if not pos.visible then continue end
        --if LocalPlayer():GetPos():DistToSqr(v) > maxdistsqr_plys then continue end

        local x, y = pos.x, pos.y

        draw.WordBox(2, x, y, "tier3", "BudgetLabel", Color(0, 0, 255), uiForeground)
    end
    --]]
end
local funnywh = false

concommand.Add("funny_wallhackers", function()

    if !LocalPlayer():IsSuperAdmin() then return end

    funnywh = !funnywh

end)
--if LocalPlayer():IsAdmin() then
    hook.Add("Think", "FSpectate_AdminObserver", function()
    if !LocalPlayer():IsAdmin() then return end
    if LocalPlayer():InVehicle() then return end

        if (LocalPlayer():GetMoveType() == MOVETYPE_NOCLIP or funnywh) and !isSpectating and LocalPlayer():GTeam() != TEAM_SPEC then
            isSpectating = true

            hook.Add("Think", "FSpectate", specThink)
            hook.Add("HUDPaint", "FSpectate", drawHelp)
            hook.Add("CalcView", "FSpectate", specCalcView)
            hook.Add("RenderScreenspaceEffects", "FSpectate", lookingLines)
        elseif ((LocalPlayer():GetMoveType() != MOVETYPE_NOCLIP and !funnywh) or LocalPlayer():GTeam() == TEAM_SPEC) and isSpectating then
            isSpectating = false

            hook.Remove("Think", "FSpectate")
            hook.Remove("HUDPaint", "FSpectate")
            hook.Remove("CalcView", "FSpectate", specCalcView)
            hook.Remove("RenderScreenspaceEffects", "FSpectate")
        end
    end)
--end
